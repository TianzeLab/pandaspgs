{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API Function Cache clear_cache Get data from server get_cohorts get_ancestry_categories get_performances get_publications get_releases get_sample_sets get_scores get_traits get_child_traits get_trait_categories Set operation bind intersect set_diff set_equal set_xor Web browser open_in_dbsnp open_in_pubmed open_publication_in_pgs_catalog open_sample_set_in_pgs_catalog open_score_in_pgs_catalog open_trait_in_pgs_catalog File operation read_scoring_file write_xlsx write_csv Class Cohort PerformanceMetric Publication Release SampleSet Score Trait TraitCategory AncestryCategory","title":"API"},{"location":"#api","text":"","title":"API"},{"location":"#function","text":"","title":"Function"},{"location":"#cache","text":"clear_cache","title":"Cache"},{"location":"#get-data-from-server","text":"get_cohorts get_ancestry_categories get_performances get_publications get_releases get_sample_sets get_scores get_traits get_child_traits get_trait_categories","title":"Get data from server"},{"location":"#set-operation","text":"bind intersect set_diff set_equal set_xor","title":"Set operation"},{"location":"#web-browser","text":"open_in_dbsnp open_in_pubmed open_publication_in_pgs_catalog open_sample_set_in_pgs_catalog open_score_in_pgs_catalog open_trait_in_pgs_catalog","title":"Web browser"},{"location":"#file-operation","text":"read_scoring_file write_xlsx write_csv","title":"File operation"},{"location":"#class","text":"Cohort PerformanceMetric Publication Release SampleSet Score Trait TraitCategory AncestryCategory","title":"Class"},{"location":"ancestry_category/","text":"pandaspgs.ancestry_category.AncestryCategory An object that stores data of type AncestryCategory. To understand the significance of each column of the DataFrame. Please visit \"Other endpoints\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data ancestry_categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_ancestry_category import get_ancestry_categories ch = get_ancestry_categories() ch ch.raw_data ch.mode ch.ancestry_categories ch.categories Subset object s by either identifier or position all_df = get_ancestry_categories() all_df[0].ancestry_categories all_df[0:3].ancestry_categories all_df['AFR'].ancestry_categories all_df[('AFR','ASN','EAS')].ancestry_categories Objects can be manipulated like sets in the mathematical sense. all_df = get_ancestry_categories() one = all_df[0] two = all_df[1] three = all_df[2] one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Ancestry category"},{"location":"ancestry_category/#pandaspgs.ancestry_category.AncestryCategory","text":"An object that stores data of type AncestryCategory. To understand the significance of each column of the DataFrame. Please visit \"Other endpoints\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data ancestry_categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_ancestry_category import get_ancestry_categories ch = get_ancestry_categories() ch ch.raw_data ch.mode ch.ancestry_categories ch.categories Subset object s by either identifier or position all_df = get_ancestry_categories() all_df[0].ancestry_categories all_df[0:3].ancestry_categories all_df['AFR'].ancestry_categories all_df[('AFR','ASN','EAS')].ancestry_categories Objects can be manipulated like sets in the mathematical sense. all_df = get_ancestry_categories() one = all_df[0] two = all_df[1] three = all_df[2] one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"AncestryCategory"},{"location":"ancestry_category/#pandaspgs.ancestry_category.AncestryCategory.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"browser/","text":"pandaspgs.browser open_in_dbsnp open_in_dbsnp ( variant_id : str ) -> bool This function launches the web browser at dbSNP and opens a tab for each SNP identifier. Parameters: variant_id ( str ) \u2013 A variant identifier, a character vector. Returns: bool \u2013 Returns TRUE if successful. Note however that this function is run for its side effect. from pandaspgs.browser import open_in_dbsnp open_in_dbsnp('rs56261590') open_in_pubmed open_in_pubmed ( pubmed_id : str ) -> bool This function launches the web browser and opens a tab for each PubMed citation. Parameters: pubmed_id ( str ) \u2013 A PubMed identifier, either a character or an integer vector. Returns: bool \u2013 Returns TRUE if successful. Note however that this function is run for its side effect from pandaspgs.browser import open_in_pubmed open_in_pubmed('26301688') open_publication_in_pgs_catalog open_publication_in_pgs_catalog ( pgp_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: pgp_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_publication_in_pgs_catalog open_publication_in_pgs_catalog('PGP000001') open_sample_set_in_pgs_catalog open_sample_set_in_pgs_catalog ( pss_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: pss_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_sample_set_in_pgs_catalog open_sample_set_in_pgs_catalog('PSS000001') open_score_in_pgs_catalog open_score_in_pgs_catalog ( pgs_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: pgs_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_score_in_pgs_catalog open_score_in_pgs_catalog('PGS000001') open_trait_in_pgs_catalog open_trait_in_pgs_catalog ( efo_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: efo_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_trait_in_pgs_catalog open_trait_in_pgs_catalog('EFO_0001645')","title":"Browser"},{"location":"browser/#pandaspgs.browser","text":"","title":"browser"},{"location":"browser/#pandaspgs.browser.open_in_dbsnp","text":"open_in_dbsnp ( variant_id : str ) -> bool This function launches the web browser at dbSNP and opens a tab for each SNP identifier. Parameters: variant_id ( str ) \u2013 A variant identifier, a character vector. Returns: bool \u2013 Returns TRUE if successful. Note however that this function is run for its side effect. from pandaspgs.browser import open_in_dbsnp open_in_dbsnp('rs56261590')","title":"open_in_dbsnp"},{"location":"browser/#pandaspgs.browser.open_in_pubmed","text":"open_in_pubmed ( pubmed_id : str ) -> bool This function launches the web browser and opens a tab for each PubMed citation. Parameters: pubmed_id ( str ) \u2013 A PubMed identifier, either a character or an integer vector. Returns: bool \u2013 Returns TRUE if successful. Note however that this function is run for its side effect from pandaspgs.browser import open_in_pubmed open_in_pubmed('26301688')","title":"open_in_pubmed"},{"location":"browser/#pandaspgs.browser.open_publication_in_pgs_catalog","text":"open_publication_in_pgs_catalog ( pgp_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: pgp_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_publication_in_pgs_catalog open_publication_in_pgs_catalog('PGP000001')","title":"open_publication_in_pgs_catalog"},{"location":"browser/#pandaspgs.browser.open_sample_set_in_pgs_catalog","text":"open_sample_set_in_pgs_catalog ( pss_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: pss_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_sample_set_in_pgs_catalog open_sample_set_in_pgs_catalog('PSS000001')","title":"open_sample_set_in_pgs_catalog"},{"location":"browser/#pandaspgs.browser.open_score_in_pgs_catalog","text":"open_score_in_pgs_catalog ( pgs_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: pgs_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_score_in_pgs_catalog open_score_in_pgs_catalog('PGS000001')","title":"open_score_in_pgs_catalog"},{"location":"browser/#pandaspgs.browser.open_trait_in_pgs_catalog","text":"open_trait_in_pgs_catalog ( efo_id : str ) -> bool This function launches the web browser and opens a tab for each identifier on the PGS Catalog web graphical user interface: https://www.pgscatalog.org/. Parameters: efo_id ( str ) \u2013 This argument indicates the type of the identifiers passed in identifier Returns: bool \u2013 Returns TRUE if successful, or FALSE otherwise. But note that this function is run for its side effect. from pandaspgs.browser import open_trait_in_pgs_catalog open_trait_in_pgs_catalog('EFO_0001645')","title":"open_trait_in_pgs_catalog"},{"location":"client/","text":"pandaspgs.client clear_cache clear_cache ( field : str = 'All' ) -> None Clear some or all of the cache. Parameters: field ( str , default: 'All' ) \u2013 It can be one of the following: 'All', 'Score', 'Publication', 'Trait', 'Trait_category', 'Performance', 'Cohort', 'Sample_set', 'Release', 'Ancestry_category' Returns: None \u2013 None from pandaspgs.get_publication import get_publications from pandaspgs.client import clear_cache # Clear all caches. clear_cache('All') pub = get_publications() # Clear the cache used by get_publications() clear_cache('Publication') pub = get_publications()","title":"Client"},{"location":"client/#pandaspgs.client","text":"","title":"client"},{"location":"client/#pandaspgs.client.clear_cache","text":"clear_cache ( field : str = 'All' ) -> None Clear some or all of the cache. Parameters: field ( str , default: 'All' ) \u2013 It can be one of the following: 'All', 'Score', 'Publication', 'Trait', 'Trait_category', 'Performance', 'Cohort', 'Sample_set', 'Release', 'Ancestry_category' Returns: None \u2013 None from pandaspgs.get_publication import get_publications from pandaspgs.client import clear_cache # Clear all caches. clear_cache('All') pub = get_publications() # Clear the cache used by get_publications() clear_cache('Publication') pub = get_publications()","title":"clear_cache"},{"location":"cohort/","text":"pandaspgs.cohort.Cohort An object that stores data of type Cohort. To understand the significance of each column of the DataFrame. Please visit \"Cohort_extended\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_cohort import get_cohorts ch = get_cohorts(cohort_symbol='ABCFS') ch ch.raw_data ch.mode ch.cohorts ch.associated_pgs_ids Subset object s by either identifier or position all_df = get_cohorts() all_df[0].cohorts all_df[0:3].cohorts all_df['100-plus'].cohorts all_df[('100-plus','23andMe','2SISTER')].cohorts Objects can be manipulated like sets in the mathematical sense. one = get_cohorts(cohort_symbol='100-plus') two = get_cohorts(cohort_symbol='23andMe') three = get_cohorts(cohort_symbol='2SISTER') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Cohort"},{"location":"cohort/#pandaspgs.cohort.Cohort","text":"An object that stores data of type Cohort. To understand the significance of each column of the DataFrame. Please visit \"Cohort_extended\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_cohort import get_cohorts ch = get_cohorts(cohort_symbol='ABCFS') ch ch.raw_data ch.mode ch.cohorts ch.associated_pgs_ids Subset object s by either identifier or position all_df = get_cohorts() all_df[0].cohorts all_df[0:3].cohorts all_df['100-plus'].cohorts all_df[('100-plus','23andMe','2SISTER')].cohorts Objects can be manipulated like sets in the mathematical sense. one = get_cohorts(cohort_symbol='100-plus') two = get_cohorts(cohort_symbol='23andMe') three = get_cohorts(cohort_symbol='2SISTER') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"Cohort"},{"location":"cohort/#pandaspgs.cohort.Cohort.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"file_operation/","text":"pandaspgs.file_operation read_scoring_file read_scoring_file ( pgs_id : str = None , grch : str = \"GRCh37\" ) -> DataFrame Download a scoring file and convert it to a DataFrame. The directory of the downloaded file is $HOME/pandaspgs_home. Parameters: pgs_id ( str , default: None ) \u2013 Polygenic Score ID. grch ( str , default: 'GRCh37' ) \u2013 GRCh37 or GRCh38. Returns: DataFrame \u2013 A DataFrame. from pandaspgs import read_scoring_file df = read_scoring_file(pgs_id='PGS000737') write_csv write_csv ( path : str , o : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> None Create a directory and write the attributes of pandasPGS objects to the corresponding CSV files. Parameters: path ( str ) \u2013 The directory that needs to be created. o ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 pandasPGS object. Returns: None \u2013 None from pandaspgs import * import os home_path = os.path.expanduser('~') + os.sep + 'pandaspgs_home' ancestry = get_ancestry_categories() write_csv(home_path + os.sep + 'ancestry', ancestry) write_xlsx write_xlsx ( path : str , o : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> None Create a directory and write the attributes of pandasPGS objects to the corresponding EXCEL files. Parameters: path ( str ) \u2013 The directory that needs to be created. o ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 pandasPGS object. Returns: None \u2013 None from pandaspgs import * import os home_path = os.path.expanduser('~') + os.sep + 'pandaspgs_home' ancestry = get_ancestry_categories() write_xlsx(home_path + os.sep + 'ancestry', ancestry)","title":"File operation"},{"location":"file_operation/#pandaspgs.file_operation","text":"","title":"file_operation"},{"location":"file_operation/#pandaspgs.file_operation.read_scoring_file","text":"read_scoring_file ( pgs_id : str = None , grch : str = \"GRCh37\" ) -> DataFrame Download a scoring file and convert it to a DataFrame. The directory of the downloaded file is $HOME/pandaspgs_home. Parameters: pgs_id ( str , default: None ) \u2013 Polygenic Score ID. grch ( str , default: 'GRCh37' ) \u2013 GRCh37 or GRCh38. Returns: DataFrame \u2013 A DataFrame. from pandaspgs import read_scoring_file df = read_scoring_file(pgs_id='PGS000737')","title":"read_scoring_file"},{"location":"file_operation/#pandaspgs.file_operation.write_csv","text":"write_csv ( path : str , o : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> None Create a directory and write the attributes of pandasPGS objects to the corresponding CSV files. Parameters: path ( str ) \u2013 The directory that needs to be created. o ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 pandasPGS object. Returns: None \u2013 None from pandaspgs import * import os home_path = os.path.expanduser('~') + os.sep + 'pandaspgs_home' ancestry = get_ancestry_categories() write_csv(home_path + os.sep + 'ancestry', ancestry)","title":"write_csv"},{"location":"file_operation/#pandaspgs.file_operation.write_xlsx","text":"write_xlsx ( path : str , o : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> None Create a directory and write the attributes of pandasPGS objects to the corresponding EXCEL files. Parameters: path ( str ) \u2013 The directory that needs to be created. o ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 pandasPGS object. Returns: None \u2013 None from pandaspgs import * import os home_path = os.path.expanduser('~') + os.sep + 'pandaspgs_home' ancestry = get_ancestry_categories() write_xlsx(home_path + os.sep + 'ancestry', ancestry)","title":"write_xlsx"},{"location":"get_ancestry_category/","text":"pandaspgs.get_ancestry_category.get_ancestry_categories get_ancestry_categories ( cached : bool = True , mode : str = \"Fat\" ) -> AncestryCategory Get AncestryCategory data from the server. Parameters: cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: AncestryCategory \u2013 A AncestryCategory object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_ancestry_category import get_ancestry_categories ch = get_ancestry_categories()","title":"Get ancestry category"},{"location":"get_ancestry_category/#pandaspgs.get_ancestry_category.get_ancestry_categories","text":"get_ancestry_categories ( cached : bool = True , mode : str = \"Fat\" ) -> AncestryCategory Get AncestryCategory data from the server. Parameters: cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: AncestryCategory \u2013 A AncestryCategory object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_ancestry_category import get_ancestry_categories ch = get_ancestry_categories()","title":"get_ancestry_categories"},{"location":"get_child_trait/","text":"pandaspgs.get_trait.get_child_traits get_child_traits ( trait_id : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Trait Get children Trait data of the specified Trait ID from the server. Parameters: trait_id ( str , default: None ) \u2013 Ontology ID (e.g. from EFO, HP or MONDO) with the format \"EFO_XXXX\" cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Trait \u2013 A Trait object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_child_trait import get_child_traits ch = get_child_traits(trait_id='EFO_0000305')","title":"Get child trait"},{"location":"get_child_trait/#pandaspgs.get_trait.get_child_traits","text":"get_child_traits ( trait_id : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Trait Get children Trait data of the specified Trait ID from the server. Parameters: trait_id ( str , default: None ) \u2013 Ontology ID (e.g. from EFO, HP or MONDO) with the format \"EFO_XXXX\" cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Trait \u2013 A Trait object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_child_trait import get_child_traits ch = get_child_traits(trait_id='EFO_0000305')","title":"get_child_traits"},{"location":"get_cohort/","text":"pandaspgs.get_cohort get_cohorts get_cohorts ( cohort_symbol : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Cohort Get Cohort data from the server. Parameters: cohort_symbol ( str , default: None ) \u2013 Short name of a cohort cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Cohort \u2013 A Cohort object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_cohort import get_cohorts ch = get_cohorts(cohort_symbol='ABCFS')","title":"Get cohort"},{"location":"get_cohort/#pandaspgs.get_cohort","text":"","title":"get_cohort"},{"location":"get_cohort/#pandaspgs.get_cohort.get_cohorts","text":"get_cohorts ( cohort_symbol : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Cohort Get Cohort data from the server. Parameters: cohort_symbol ( str , default: None ) \u2013 Short name of a cohort cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Cohort \u2013 A Cohort object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_cohort import get_cohorts ch = get_cohorts(cohort_symbol='ABCFS')","title":"get_cohorts"},{"location":"get_performance/","text":"pandaspgs.get_performance.get_performances get_performances ( ppm_id : str = None , pgs_id : str = None , pgp_id : str = None , pmid : int = None , cached : bool = True , mode : str = \"Fat\" , ) -> PerformanceMetric Get PerformanceMetrics data from the server. Parameters: ppm_id ( str , default: None ) \u2013 PGS Performance Metric ID (PPM). pgs_id ( str , default: None ) \u2013 Polygenic Score ID (PGS). pgp_id ( str , default: None ) \u2013 PGS Catalog Publication ID (PGP). pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\"). cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: PerformanceMetric \u2013 A PerformanceMetrics object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_performance import get_performances ch = get_performances(ppm_id='PPM000001')","title":"Get performance"},{"location":"get_performance/#pandaspgs.get_performance.get_performances","text":"get_performances ( ppm_id : str = None , pgs_id : str = None , pgp_id : str = None , pmid : int = None , cached : bool = True , mode : str = \"Fat\" , ) -> PerformanceMetric Get PerformanceMetrics data from the server. Parameters: ppm_id ( str , default: None ) \u2013 PGS Performance Metric ID (PPM). pgs_id ( str , default: None ) \u2013 Polygenic Score ID (PGS). pgp_id ( str , default: None ) \u2013 PGS Catalog Publication ID (PGP). pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\"). cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: PerformanceMetric \u2013 A PerformanceMetrics object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_performance import get_performances ch = get_performances(ppm_id='PPM000001')","title":"get_performances"},{"location":"get_publication/","text":"pandaspgs.get_publication.get_publications get_publications ( pgs_id : str = None , pgp_id : str = None , pmid : int = None , author : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Publication Get Publication data from the server. Parameters: pgs_id ( str , default: None ) \u2013 PGS Publication ID (PGP) pgp_id ( str , default: None ) \u2013 Polygenic Score ID (PGS) pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\") author ( str , default: None ) \u2013 Publication author (any author in the list of authors in a publication) cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Publication \u2013 A Publication object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_publication import get_publications ch = get_publications(pgp_id='PGP000003')","title":"Get publication"},{"location":"get_publication/#pandaspgs.get_publication.get_publications","text":"get_publications ( pgs_id : str = None , pgp_id : str = None , pmid : int = None , author : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Publication Get Publication data from the server. Parameters: pgs_id ( str , default: None ) \u2013 PGS Publication ID (PGP) pgp_id ( str , default: None ) \u2013 Polygenic Score ID (PGS) pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\") author ( str , default: None ) \u2013 Publication author (any author in the list of authors in a publication) cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Publication \u2013 A Publication object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_publication import get_publications ch = get_publications(pgp_id='PGP000003')","title":"get_publications"},{"location":"get_release/","text":"pandaspgs.get_release.get_releases get_releases ( date : str = \"all\" , cached : bool = True , mode : str = \"Fat\" , ) -> Release Get Release data from the server. Parameters: date ( str , default: 'all' ) \u2013 PGS Catalog release date (format YYYY-MM-DD) or 'latest' or 'all' cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Release \u2013 A Release object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_release import get_releases ch = get_releases(date=\"2024-01-26\")","title":"Get release"},{"location":"get_release/#pandaspgs.get_release.get_releases","text":"get_releases ( date : str = \"all\" , cached : bool = True , mode : str = \"Fat\" , ) -> Release Get Release data from the server. Parameters: date ( str , default: 'all' ) \u2013 PGS Catalog release date (format YYYY-MM-DD) or 'latest' or 'all' cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Release \u2013 A Release object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_release import get_releases ch = get_releases(date=\"2024-01-26\")","title":"get_releases"},{"location":"get_sample_set/","text":"pandaspgs.get_sample_set.get_sample_sets get_sample_sets ( pss_id : str = None , pgs_id : str = None , pgp_id : str = None , pmid : int = None , cached : bool = True , mode : str = \"Fat\" , ) -> SampleSet Get SampleSet data from the server. Parameters: pss_id ( str , default: None ) \u2013 PGS Sample Set ID (PSS) pgs_id ( str , default: None ) \u2013 Polygenic Score ID (PGS) pgp_id ( str , default: None ) \u2013 PGS Catalog Publication ID (PGP) pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\") cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: SampleSet \u2013 A SampleSet object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_sample_set import get_sample_sets ch = get_sample_sets(pss_id='PSS000001')","title":"Get sample set"},{"location":"get_sample_set/#pandaspgs.get_sample_set.get_sample_sets","text":"get_sample_sets ( pss_id : str = None , pgs_id : str = None , pgp_id : str = None , pmid : int = None , cached : bool = True , mode : str = \"Fat\" , ) -> SampleSet Get SampleSet data from the server. Parameters: pss_id ( str , default: None ) \u2013 PGS Sample Set ID (PSS) pgs_id ( str , default: None ) \u2013 Polygenic Score ID (PGS) pgp_id ( str , default: None ) \u2013 PGS Catalog Publication ID (PGP) pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\") cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: SampleSet \u2013 A SampleSet object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_sample_set import get_sample_sets ch = get_sample_sets(pss_id='PSS000001')","title":"get_sample_sets"},{"location":"get_score/","text":"pandaspgs.get_score.get_scores get_scores ( pgs_id : str = None , pgp_id : str = None , pmid : int = None , trait_id : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Score Get Score data from the server. Parameters: pgs_id ( str , default: None ) \u2013 Polygenic Score ID pgp_id ( str , default: None ) \u2013 PGS Catalog Publication ID (PGP) pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\") trait_id ( str , default: None ) \u2013 Ontology ID (e.g. from EFO, HP or MONDO) with the format \"EFO_XXXX\" cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Score \u2013 A Score object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_score import get_scores ch = get_scores(pgs_id='PGS000001')","title":"Get score"},{"location":"get_score/#pandaspgs.get_score.get_scores","text":"get_scores ( pgs_id : str = None , pgp_id : str = None , pmid : int = None , trait_id : str = None , cached : bool = True , mode : str = \"Fat\" , ) -> Score Get Score data from the server. Parameters: pgs_id ( str , default: None ) \u2013 Polygenic Score ID pgp_id ( str , default: None ) \u2013 PGS Catalog Publication ID (PGP) pmid ( int , default: None ) \u2013 PubMed ID (without the prefix \"PMID:\") trait_id ( str , default: None ) \u2013 Ontology ID (e.g. from EFO, HP or MONDO) with the format \"EFO_XXXX\" cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Score \u2013 A Score object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_score import get_scores ch = get_scores(pgs_id='PGS000001')","title":"get_scores"},{"location":"get_trait/","text":"pandaspgs.get_trait.get_traits get_traits ( trait_id : str = None , term : str = None , exact : bool = None , cached : bool = True , mode : str = \"Fat\" , ) -> Trait Get Trait data from the server. Parameters: trait_id ( str , default: None ) \u2013 Ontology ID (e.g. from EFO, HP or MONDO) with the format \"EFO_XXXX\" term ( str , default: None ) \u2013 Trait ID, trait name, trait category, trait synonym or external mapped terms/IDs exact ( bool , default: None ) \u2013 Flag to search only the exact term or not cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Trait \u2013 A Trait object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_trait import get_traits ch = get_traits(trait_id='EFO_0000305')","title":"Get trait"},{"location":"get_trait/#pandaspgs.get_trait.get_traits","text":"get_traits ( trait_id : str = None , term : str = None , exact : bool = None , cached : bool = True , mode : str = \"Fat\" , ) -> Trait Get Trait data from the server. Parameters: trait_id ( str , default: None ) \u2013 Ontology ID (e.g. from EFO, HP or MONDO) with the format \"EFO_XXXX\" term ( str , default: None ) \u2013 Trait ID, trait name, trait category, trait synonym or external mapped terms/IDs exact ( bool , default: None ) \u2013 Flag to search only the exact term or not cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: Trait \u2013 A Trait object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_trait import get_traits ch = get_traits(trait_id='EFO_0000305')","title":"get_traits"},{"location":"get_trait_category/","text":"pandaspgs.get_trait.get_trait_categories get_trait_categories ( cached : bool = True , mode : str = \"Fat\" ) -> TraitCategory Get TraitCategory data from the server. Parameters: cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: TraitCategory \u2013 A TraitCategory object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_trait_category import get_trait_categories ch = get_trait_categories()","title":"Get trait category"},{"location":"get_trait_category/#pandaspgs.get_trait.get_trait_categories","text":"get_trait_categories ( cached : bool = True , mode : str = \"Fat\" ) -> TraitCategory Get TraitCategory data from the server. Parameters: cached ( bool , default: True ) \u2013 Whether or not to try to get data from the cache. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the returned object. Returns: TraitCategory \u2013 A TraitCategory object. Attributes of type DataFrame have hierarchical dependencies. from pandaspgs.get_trait_category import get_trait_categories ch = get_trait_categories()","title":"get_trait_categories"},{"location":"performance/","text":"pandaspgs.performance.PerformanceMetric An object that stores data of type PerformanceMetric. To understand the significance of each column of the DataFrame. Please visit \"PerformanceMetric\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data performance_metrics \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. effect_sizes \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. class_acc \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. othermetrics \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_performance import get_performances ch = get_performances(ppm_id='PPM000001') ch ch.raw_data ch.mode ch.performance_metrics ch.samples ch.cohorts ch.effect_sizes ch.class_acc ch.othermetrics Subset object s by either identifier or position all_df = get_performance() all_df[0].performance_metrics all_df[0:3].performance_metrics all_df['PPM000001'].performance_metrics all_df[('PPM000001','PPM000002','PPM000003')].performance_metrics Objects can be manipulated like sets in the mathematical sense. one = get_cohorts(ppm_id='PPM000001') two = get_cohorts(ppm_id='PPM000002') three = get_cohorts(ppm_id='PPM000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Performance"},{"location":"performance/#pandaspgs.performance.PerformanceMetric","text":"An object that stores data of type PerformanceMetric. To understand the significance of each column of the DataFrame. Please visit \"PerformanceMetric\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data performance_metrics \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. effect_sizes \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. class_acc \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. othermetrics \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_performance import get_performances ch = get_performances(ppm_id='PPM000001') ch ch.raw_data ch.mode ch.performance_metrics ch.samples ch.cohorts ch.effect_sizes ch.class_acc ch.othermetrics Subset object s by either identifier or position all_df = get_performance() all_df[0].performance_metrics all_df[0:3].performance_metrics all_df['PPM000001'].performance_metrics all_df[('PPM000001','PPM000002','PPM000003')].performance_metrics Objects can be manipulated like sets in the mathematical sense. one = get_cohorts(ppm_id='PPM000001') two = get_cohorts(ppm_id='PPM000002') three = get_cohorts(ppm_id='PPM000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"PerformanceMetric"},{"location":"performance/#pandaspgs.performance.PerformanceMetric.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"publication/","text":"pandaspgs.publication.Publication An object that stores data of type Publication. To understand the significance of each column of the DataFrame. Please visit \"Publication\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data publications \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_publication import get_publications ch = get_publications(pgs_id='PGS000001') ch ch.raw_data ch.mode ch.publications ch.associated_pgs_ids Subset object s by either identifier or position all_df = get_publications() all_df[0].publications all_df[0:3].publications all_df['PGP000001'].publications all_df[('PGP000001','PGP000002','PGP000003')].publications Objects can be manipulated like sets in the mathematical sense. one = get_cohorts(ppm_id='PPM000001') two = get_cohorts(ppm_id='PPM000002') three = get_cohorts(ppm_id='PPM000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Publication"},{"location":"publication/#pandaspgs.publication.Publication","text":"An object that stores data of type Publication. To understand the significance of each column of the DataFrame. Please visit \"Publication\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data publications \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_publication import get_publications ch = get_publications(pgs_id='PGS000001') ch ch.raw_data ch.mode ch.publications ch.associated_pgs_ids Subset object s by either identifier or position all_df = get_publications() all_df[0].publications all_df[0:3].publications all_df['PGP000001'].publications all_df[('PGP000001','PGP000002','PGP000003')].publications Objects can be manipulated like sets in the mathematical sense. one = get_cohorts(ppm_id='PPM000001') two = get_cohorts(ppm_id='PPM000002') three = get_cohorts(ppm_id='PPM000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"Publication"},{"location":"publication/#pandaspgs.publication.Publication.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"release/","text":"pandaspgs.release.Release An object that stores data of type Release. To understand the significance of each column of the DataFrame. Please visit \"Release\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data releases \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_performance_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_publication_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_score_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_new_trait_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_release import get_releases ch = get_releases(date=\"2024-01-26\") ch ch.raw_data ch.mode ch.releases ch.released_performance_ids ch.released_publication_ids ch.released_score_ids ch.released_new_trait_ids Subset object s by either identifier or position all_df = get_releases() all_df[0].releases all_df[0:3].releases all_df['2024-01-26'].releases all_df[('2024-01-26','2024-01-11','2023-12-19')].releases Objects can be manipulated like sets in the mathematical sense. one = get_releases(date='2024-01-26') two = get_releases(date='2024-01-11') three = get_releases(date='2023-12-19') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Release"},{"location":"release/#pandaspgs.release.Release","text":"An object that stores data of type Release. To understand the significance of each column of the DataFrame. Please visit \"Release\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data releases \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_performance_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_publication_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_score_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. released_new_trait_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_release import get_releases ch = get_releases(date=\"2024-01-26\") ch ch.raw_data ch.mode ch.releases ch.released_performance_ids ch.released_publication_ids ch.released_score_ids ch.released_new_trait_ids Subset object s by either identifier or position all_df = get_releases() all_df[0].releases all_df[0:3].releases all_df['2024-01-26'].releases all_df[('2024-01-26','2024-01-11','2023-12-19')].releases Objects can be manipulated like sets in the mathematical sense. one = get_releases(date='2024-01-26') two = get_releases(date='2024-01-11') three = get_releases(date='2023-12-19') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"Release"},{"location":"release/#pandaspgs.release.Release.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"sample_set/","text":"pandaspgs.sample_set.SampleSet An object that stores data of type SampleSet. To understand the significance of each column of the DataFrame. Please visit \"SampleSet\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data sample_sets \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_sample_set import get_sample_sets ch = get_sample_sets(pss_id='PSS000001') ch ch.raw_data ch.mode ch.sample_sets ch.samples ch.cohorts Subset object s by either identifier or position all_df = get_sample_sets() all_df[0].sample_sets all_df[0:3].sample_sets all_df['PSS000001'].sample_sets all_df[('PSS000001','PSS000002','PSS000003')].sample_sets Objects can be manipulated like sets in the mathematical sense. one = get_sample_sets(pss_id='PSS000001') two = get_sample_sets(pss_id='PSS000002') three = get_sample_sets(pss_id='PSS000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Sample set"},{"location":"sample_set/#pandaspgs.sample_set.SampleSet","text":"An object that stores data of type SampleSet. To understand the significance of each column of the DataFrame. Please visit \"SampleSet\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data sample_sets \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_sample_set import get_sample_sets ch = get_sample_sets(pss_id='PSS000001') ch ch.raw_data ch.mode ch.sample_sets ch.samples ch.cohorts Subset object s by either identifier or position all_df = get_sample_sets() all_df[0].sample_sets all_df[0:3].sample_sets all_df['PSS000001'].sample_sets all_df[('PSS000001','PSS000002','PSS000003')].sample_sets Objects can be manipulated like sets in the mathematical sense. one = get_sample_sets(pss_id='PSS000001') two = get_sample_sets(pss_id='PSS000002') three = get_sample_sets(pss_id='PSS000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"SampleSet"},{"location":"sample_set/#pandaspgs.sample_set.SampleSet.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"score/","text":"pandaspgs.score.Score An object that stores data of type Score. To understand the significance of each column of the DataFrame. Please visit \"Score\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data scores \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_variants \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_variants_cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_efo \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_training \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_training_cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. ancestry_distribution \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_score import get_scores ch = get_scores(pgs_id='PGS000001') ch ch.raw_data ch.mode ch.scores ch.samples_variants ch.samples_variants_cohorts ch.trait_efo ch.samples_training ch.samples_training_cohorts ch.ancestry_distribution Subset object s by either identifier or position all_df = get_scores() all_df[0].scores all_df[0:3].scores all_df['PGS000001'].scores all_df[('PGS000001','PGS000002','PGS000003')].scores Objects can be manipulated like sets in the mathematical sense. one = get_scores(pgs_id='PGS000001') two = get_scores(pgs_id='PGS000002') three = get_scores(pgs_id='PGS000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Score"},{"location":"score/#pandaspgs.score.Score","text":"An object that stores data of type Score. To understand the significance of each column of the DataFrame. Please visit \"Score\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data scores \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_variants \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_variants_cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_efo \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_training \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. samples_training_cohorts \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. ancestry_distribution \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_score import get_scores ch = get_scores(pgs_id='PGS000001') ch ch.raw_data ch.mode ch.scores ch.samples_variants ch.samples_variants_cohorts ch.trait_efo ch.samples_training ch.samples_training_cohorts ch.ancestry_distribution Subset object s by either identifier or position all_df = get_scores() all_df[0].scores all_df[0:3].scores all_df['PGS000001'].scores all_df[('PGS000001','PGS000002','PGS000003')].scores Objects can be manipulated like sets in the mathematical sense. one = get_scores(pgs_id='PGS000001') two = get_scores(pgs_id='PGS000002') three = get_scores(pgs_id='PGS000003') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"Score"},{"location":"score/#pandaspgs.score.Score.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"set_operation/","text":"pandaspgs.set_operation bind bind ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) Binds together PGS objects of the same object. Note that bind() preserves duplicates whereas union() does not. Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import bind a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = bind(a,b) intersect intersect ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) Returns the data common to both A and B, with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import intersect a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = intersect(a,b) set_diff set_diff ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) returns the data in A that is not in B, with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import set_diff a = get_cohorts(cohort_symbol='23andMe') b = get_cohorts(cohort_symbol='23andMe') c = set_diff(a,b) set_equal set_equal ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> bool Check if the raw data of a and b are equal Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: bool \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import set_equal a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = set_equal(a,b) set_xor set_xor ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) returns the data of A and B that are not in their intersection (the symmetric difference), with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import set_xor a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = set_xor(a,b) union union ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) returns the combined data from A and B with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import union a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = union(a,b)","title":"Set operation"},{"location":"set_operation/#pandaspgs.set_operation","text":"","title":"set_operation"},{"location":"set_operation/#pandaspgs.set_operation.bind","text":"bind ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) Binds together PGS objects of the same object. Note that bind() preserves duplicates whereas union() does not. Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import bind a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = bind(a,b)","title":"bind"},{"location":"set_operation/#pandaspgs.set_operation.intersect","text":"intersect ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) Returns the data common to both A and B, with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import intersect a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = intersect(a,b)","title":"intersect"},{"location":"set_operation/#pandaspgs.set_operation.set_diff","text":"set_diff ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) returns the data in A that is not in B, with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import set_diff a = get_cohorts(cohort_symbol='23andMe') b = get_cohorts(cohort_symbol='23andMe') c = set_diff(a,b)","title":"set_diff"},{"location":"set_operation/#pandaspgs.set_operation.set_equal","text":"set_equal ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> bool Check if the raw data of a and b are equal Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: bool \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import set_equal a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = set_equal(a,b)","title":"set_equal"},{"location":"set_operation/#pandaspgs.set_operation.set_xor","text":"set_xor ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) returns the data of A and B that are not in their intersection (the symmetric difference), with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import set_xor a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = set_xor(a,b)","title":"set_xor"},{"location":"set_operation/#pandaspgs.set_operation.union","text":"union ( a : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , b : AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory , ) -> ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) returns the combined data from A and B with no repetitions Parameters: a ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the pandasPGS custom class. b ( AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory ) \u2013 An object of the same type as a. Returns: AncestryCategory | Cohort | PerformanceMetric | Publication | Release | SampleSet | Score | Trait | TraitCategory \u2013 An object of the same type as a. from pandaspgs.get_cohort import get_cohorts from pandaspgs.set_operation import union a = get_cohorts(cohort_symbol='100-plus') b = get_cohorts(cohort_symbol='23andMe') c = union(a,b)","title":"union"},{"location":"trait/","text":"pandaspgs.trait.Trait An object that stores data of type Trait. To understand the significance of each column of the DataFrame. Please visit \"EFOTrait_Ontology\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data traits \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_synonyms \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_mapped_terms \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. child_associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_trait import get_traits ch = get_traits(trait_id='EFO_0004214') ch ch.raw_data ch.mode ch.traits ch.trait_categories ch.trait_synonyms ch.trait_mapped_terms ch.associated_pgs_ids ch.child_associated_pgs_ids Subset object s by either identifier or position all_df = get_traits() all_df[0].traits all_df[0:3].traits all_df['EFO_0004214'].traits all_df[('EFO_0004214','HP_0002027','HP_0011458')].traits Objects can be manipulated like sets in the mathematical sense. one = get_scores(trait_id='EFO_0004214') two = get_scores(trait_id='HP_0002027') three = get_scores(trait_id='HP_0011458') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Trait"},{"location":"trait/#pandaspgs.trait.Trait","text":"An object that stores data of type Trait. To understand the significance of each column of the DataFrame. Please visit \"EFOTrait_Ontology\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data traits \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_synonyms \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_mapped_terms \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. child_associated_pgs_ids \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. mode \u2013 Fat or Thin. Specifies the mode of the returned object. from pandaspgs.get_trait import get_traits ch = get_traits(trait_id='EFO_0004214') ch ch.raw_data ch.mode ch.traits ch.trait_categories ch.trait_synonyms ch.trait_mapped_terms ch.associated_pgs_ids ch.child_associated_pgs_ids Subset object s by either identifier or position all_df = get_traits() all_df[0].traits all_df[0:3].traits all_df['EFO_0004214'].traits all_df[('EFO_0004214','HP_0002027','HP_0011458')].traits Objects can be manipulated like sets in the mathematical sense. one = get_scores(trait_id='EFO_0004214') two = get_scores(trait_id='HP_0002027') three = get_scores(trait_id='HP_0011458') one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"Trait"},{"location":"trait/#pandaspgs.trait.Trait.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"},{"location":"trait_category/","text":"pandaspgs.trait_category.TraitCategory An object that stores data of type TraitCategory. To understand the significance of each column of the DataFrame. Please visit \"TraitCategory\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data efotraits \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. from pandaspgs.get_trait import get_trait_categories ch = get_trait_categories() ch ch.raw_data ch.mode ch.efotraits ch.trait_categories Subset object s by either identifier or position all_df = get_trait_categories() all_df[0].efotraits all_df[0:3].efotraits all_df['Biological process'].efotraits all_df[('Biological process','Body measurement','Cancer')].efotraits Objects can be manipulated like sets in the mathematical sense. all_df = get_trait_categories() one = all_df[0] two = all_df[1] three = all_df[2] one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three __init__ __init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"Trait category"},{"location":"trait_category/#pandaspgs.trait_category.TraitCategory","text":"An object that stores data of type TraitCategory. To understand the significance of each column of the DataFrame. Please visit \"TraitCategory\" in PGS Catalog Documentation for details. Attributes: raw_data \u2013 list. Convert from obtained JSON data efotraits \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. trait_categories \u2013 DataFrame. It only exists if the parameter mode of constructor is Fat. from pandaspgs.get_trait import get_trait_categories ch = get_trait_categories() ch ch.raw_data ch.mode ch.efotraits ch.trait_categories Subset object s by either identifier or position all_df = get_trait_categories() all_df[0].efotraits all_df[0:3].efotraits all_df['Biological process'].efotraits all_df[('Biological process','Body measurement','Cancer')].efotraits Objects can be manipulated like sets in the mathematical sense. all_df = get_trait_categories() one = all_df[0] two = all_df[1] three = all_df[2] one_and_two = one+two two_and_three = two+three only_one = one_and_two - two_and_three only_two = one_and_two & two_and_three one_and_two_and_three = one_and_two | two_and_three one_and_three = one_and_two ^ two_and_three","title":"TraitCategory"},{"location":"trait_category/#pandaspgs.trait_category.TraitCategory.__init__","text":"__init__ ( data : list = [], mode : str = 'Fat' ) Parameters: data ( list , default: [] ) \u2013 Raw JSON data. mode ( str , default: 'Fat' ) \u2013 Fat or Thin. Specifies the mode of the object.","title":"__init__"}]}